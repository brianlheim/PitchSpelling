how i understand the problem.

general solution:

1. process inputs
2. assign costs to graphs (explore output space)
3. select lowest-cost graph

strategy for verticalities:

1. generate intervals from input pcs
2. sort intervals by decreasing expected loss variance (james's interval sorting thing)
3. find low-cost graphs through recursive tree traversal
4. select lowest-cost graph

longer-term ideas

find rules by trying out dyads, triads, etc (verticalities)
then see how dyad to dyad changes things and could point toward adaptation of the framework from vertical to 2D
wait until the end to fine-tune the optimizations
